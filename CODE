// ==== BLYNK CONFIGURATION ====
#define BLYNK_TEMPLATE_ID "TMPL3iM-O34wW"
#define BLYNK_TEMPLATE_NAME "MAJOR PROJECT RC PLANE"
#define BLYNK_AUTH_TOKEN "WBKIzKfAe1L5-6o4Z3p0oqFfKstouXvI"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <Wire.h>
#include <ESP32Servo.h>
#include <Adafruit_BMP280.h>
#include <MPU6050.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>

// WiFi credentials
char ssid[] = "Mini-Project";
char pass[] = "uday8dewas";

// Virtual Pins
#define VPIN_THROTTLE V1
#define VPIN_RUDDER_LEFT V2
#define VPIN_RUDDER_RIGHT V3
#define VPIN_ELEVATOR V4
#define VPIN_AILERON V5
#define VPIN_GPS V6

// GPS and Serial
TinyGPSPlus gps;
HardwareSerial gpsSerial(1);

// Custom I2C for BMP280
TwoWire bmpWire(1);
Adafruit_BMP280 bmp(&bmpWire);

// MPU6050
MPU6050 mpu;

// ESP32Servo for all servos/ESC
Servo esc, elevator, aileron, rudder;

// GPIO Pins
#define GPS_RX 16
#define GPS_TX 17
#define MPU_SDA 21
#define MPU_SCL 22
#define BMP_SDA 25
#define BMP_SCL 26
#define ESC_PIN 32
#define ELEVATOR_PIN 33
#define AILERON_PIN 27
#define RUDDER_PIN 14

// Flight Control Variables
float targetAltitude = 0;
bool firstAltitudeRead = true;
bool rudderLeft = false, rudderRight = false;

// Blynk controls
BLYNK_WRITE(VPIN_RUDDER_LEFT) {
  rudderLeft = param.asInt();
}
BLYNK_WRITE(VPIN_RUDDER_RIGHT) {
  rudderRight = param.asInt();
}

void setup() {
  Serial.begin(115200);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  // GPS setup
  gpsSerial.begin(9600, SERIAL_8N1, GPS_RX, GPS_TX);

  // MPU6050 setup
  Wire.begin(MPU_SDA, MPU_SCL);
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed");
  }

  // BMP280 setup
  bmpWire.begin(BMP_SDA, BMP_SCL);
  if (!bmp.begin(0x76)) {
    Serial.println("BMP280 not found");
  }

  // Servo setup
  esc.attach(ESC_PIN);
esc.writeMicroseconds(1000);  // Set throttle to minimum for ESC arming
delay(2000);  // Give ESC time to arm

  elevator.attach(ELEVATOR_PIN);
  aileron.attach(AILERON_PIN);
  rudder.attach(RUDDER_PIN);
}

void loop() {
  Blynk.run();

  // GPS read
  while (gpsSerial.available()) {
    gps.encode(gpsSerial.read());
  }

  if (gps.location.isUpdated()) {
    String gpsInfo = "Lat: " + String(gps.location.lat(), 6) + ", Lon: " + String(gps.location.lng(), 6);
    Blynk.virtualWrite(VPIN_GPS, gpsInfo);
    Serial.println(gpsInfo);
  }

  // Read MPU6050 motion data
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  // Stabilize elevator and aileron based on pitch/roll
  int elev = map(ay, -17000, 17000, 60, 120);
  int ail = map(ax, -17000, 17000, 60, 120);
  elevator.write(constrain(elev, 60, 120));
  aileron.write(constrain(ail, 60, 120));

  // Rudder control via Blynk
  if (rudderLeft) rudder.write(60);
  else if (rudderRight) rudder.write(120);
  else rudder.write(90);

  // Altitude hold using BMP280
  float currentAltitude = bmp.readAltitude(1013.25);
  if (firstAltitudeRead && currentAltitude > 0) {
    targetAltitude = currentAltitude;
    firstAltitudeRead = false;
  }

  float altitudeError = targetAltitude - currentAltitude;
  int throttleCorrection = map(altitudeError * 10, -100, 100, 1400, 1600);
  throttleCorrection = constrain(throttleCorrection, 1200, 1800);
  esc.writeMicroseconds(throttleCorrection);

  delay(200);
}
